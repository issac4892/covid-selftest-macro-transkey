@file:Suppress("EXPERIMENTAL_API_USAGE", "FunctionName", "LocalVariableName")

package com.lhwdev.selfTestMacro.seed

import kotlin.experimental.xor


private const val SEED_KEY_LENGTH = 16
private const val SEED_BLOCK_SIZE = 16

private val SS = arrayOf(
	uintArrayOf(
		0x2989a1a8u, 0x05858184u, 0x16c6d2d4u, 0x13c3d3d0u,
		0x14445054u, 0x1d0d111cu, 0x2c8ca0acu, 0x25052124u,
		0x1d4d515cu, 0x03434340u, 0x18081018u, 0x1e0e121cu,
		0x11415150u, 0x3cccf0fcu, 0x0acac2c8u, 0x23436360u,
		0x28082028u, 0x04444044u, 0x20002020u, 0x1d8d919cu,
		0x20c0e0e0u, 0x22c2e2e0u, 0x08c8c0c8u, 0x17071314u,
		0x2585a1a4u, 0x0f8f838cu, 0x03030300u, 0x3b4b7378u,
		0x3b8bb3b8u, 0x13031310u, 0x12c2d2d0u, 0x2ecee2ecu,
		0x30407070u, 0x0c8c808cu, 0x3f0f333cu, 0x2888a0a8u,
		0x32023230u, 0x1dcdd1dcu, 0x36c6f2f4u, 0x34447074u,
		0x2ccce0ecu, 0x15859194u, 0x0b0b0308u, 0x17475354u,
		0x1c4c505cu, 0x1b4b5358u, 0x3d8db1bcu, 0x01010100u,
		0x24042024u, 0x1c0c101cu, 0x33437370u, 0x18889098u,
		0x10001010u, 0x0cccc0ccu, 0x32c2f2f0u, 0x19c9d1d8u,
		0x2c0c202cu, 0x27c7e3e4u, 0x32427270u, 0x03838380u,
		0x1b8b9398u, 0x11c1d1d0u, 0x06868284u, 0x09c9c1c8u,
		0x20406060u, 0x10405050u, 0x2383a3a0u, 0x2bcbe3e8u,
		0x0d0d010cu, 0x3686b2b4u, 0x1e8e929cu, 0x0f4f434cu,
		0x3787b3b4u, 0x1a4a5258u, 0x06c6c2c4u, 0x38487078u,
		0x2686a2a4u, 0x12021210u, 0x2f8fa3acu, 0x15c5d1d4u,
		0x21416160u, 0x03c3c3c0u, 0x3484b0b4u, 0x01414140u,
		0x12425250u, 0x3d4d717cu, 0x0d8d818cu, 0x08080008u,
		0x1f0f131cu, 0x19899198u, 0x00000000u, 0x19091118u,
		0x04040004u, 0x13435350u, 0x37c7f3f4u, 0x21c1e1e0u,
		0x3dcdf1fcu, 0x36467274u, 0x2f0f232cu, 0x27072324u,
		0x3080b0b0u, 0x0b8b8388u, 0x0e0e020cu, 0x2b8ba3a8u,
		0x2282a2a0u, 0x2e4e626cu, 0x13839390u, 0x0d4d414cu,
		0x29496168u, 0x3c4c707cu, 0x09090108u, 0x0a0a0208u,
		0x3f8fb3bcu, 0x2fcfe3ecu, 0x33c3f3f0u, 0x05c5c1c4u,
		0x07878384u, 0x14041014u, 0x3ecef2fcu, 0x24446064u,
		0x1eced2dcu, 0x2e0e222cu, 0x0b4b4348u, 0x1a0a1218u,
		0x06060204u, 0x21012120u, 0x2b4b6368u, 0x26466264u,
		0x02020200u, 0x35c5f1f4u, 0x12829290u, 0x0a8a8288u,
		0x0c0c000cu, 0x3383b3b0u, 0x3e4e727cu, 0x10c0d0d0u,
		0x3a4a7278u, 0x07474344u, 0x16869294u, 0x25c5e1e4u,
		0x26062224u, 0x00808080u, 0x2d8da1acu, 0x1fcfd3dcu,
		0x2181a1a0u, 0x30003030u, 0x37073334u, 0x2e8ea2acu,
		0x36063234u, 0x15051114u, 0x22022220u, 0x38083038u,
		0x34c4f0f4u, 0x2787a3a4u, 0x05454144u, 0x0c4c404cu,
		0x01818180u, 0x29c9e1e8u, 0x04848084u, 0x17879394u,
		0x35053134u, 0x0bcbc3c8u, 0x0ecec2ccu, 0x3c0c303cu,
		0x31417170u, 0x11011110u, 0x07c7c3c4u, 0x09898188u,
		0x35457174u, 0x3bcbf3f8u, 0x1acad2d8u, 0x38c8f0f8u,
		0x14849094u, 0x19495158u, 0x02828280u, 0x04c4c0c4u,
		0x3fcff3fcu, 0x09494148u, 0x39093138u, 0x27476364u,
		0x00c0c0c0u, 0x0fcfc3ccu, 0x17c7d3d4u, 0x3888b0b8u,
		0x0f0f030cu, 0x0e8e828cu, 0x02424240u, 0x23032320u,
		0x11819190u, 0x2c4c606cu, 0x1bcbd3d8u, 0x2484a0a4u,
		0x34043034u, 0x31c1f1f0u, 0x08484048u, 0x02c2c2c0u,
		0x2f4f636cu, 0x3d0d313cu, 0x2d0d212cu, 0x00404040u,
		0x3e8eb2bcu, 0x3e0e323cu, 0x3c8cb0bcu, 0x01c1c1c0u,
		0x2a8aa2a8u, 0x3a8ab2b8u, 0x0e4e424cu, 0x15455154u,
		0x3b0b3338u, 0x1cccd0dcu, 0x28486068u, 0x3f4f737cu,
		0x1c8c909cu, 0x18c8d0d8u, 0x0a4a4248u, 0x16465254u,
		0x37477374u, 0x2080a0a0u, 0x2dcde1ecu, 0x06464244u,
		0x3585b1b4u, 0x2b0b2328u, 0x25456164u, 0x3acaf2f8u,
		0x23c3e3e0u, 0x3989b1b8u, 0x3181b1b0u, 0x1f8f939cu,
		0x1e4e525cu, 0x39c9f1f8u, 0x26c6e2e4u, 0x3282b2b0u,
		0x31013130u, 0x2acae2e8u, 0x2d4d616cu, 0x1f4f535cu,
		0x24c4e0e4u, 0x30c0f0f0u, 0x0dcdc1ccu, 0x08888088u,
		0x16061214u, 0x3a0a3238u, 0x18485058u, 0x14c4d0d4u,
		0x22426260u, 0x29092128u, 0x07070304u, 0x33033330u,
		0x28c8e0e8u, 0x1b0b1318u, 0x05050104u, 0x39497178u,
		0x10809090u, 0x2a4a6268u, 0x2a0a2228u, 0x1a8a9298u,
	).asIntArray(),
	uintArrayOf(
		0x38380830u, 0xe828c8e0u, 0x2c2d0d21u, 0xa42686a2u,
		0xcc0fcfc3u, 0xdc1eced2u, 0xb03383b3u, 0xb83888b0u,
		0xac2f8fa3u, 0x60204060u, 0x54154551u, 0xc407c7c3u,
		0x44044440u, 0x6c2f4f63u, 0x682b4b63u, 0x581b4b53u,
		0xc003c3c3u, 0x60224262u, 0x30330333u, 0xb43585b1u,
		0x28290921u, 0xa02080a0u, 0xe022c2e2u, 0xa42787a3u,
		0xd013c3d3u, 0x90118191u, 0x10110111u, 0x04060602u,
		0x1c1c0c10u, 0xbc3c8cb0u, 0x34360632u, 0x480b4b43u,
		0xec2fcfe3u, 0x88088880u, 0x6c2c4c60u, 0xa82888a0u,
		0x14170713u, 0xc404c4c0u, 0x14160612u, 0xf434c4f0u,
		0xc002c2c2u, 0x44054541u, 0xe021c1e1u, 0xd416c6d2u,
		0x3c3f0f33u, 0x3c3d0d31u, 0x8c0e8e82u, 0x98188890u,
		0x28280820u, 0x4c0e4e42u, 0xf436c6f2u, 0x3c3e0e32u,
		0xa42585a1u, 0xf839c9f1u, 0x0c0d0d01u, 0xdc1fcfd3u,
		0xd818c8d0u, 0x282b0b23u, 0x64264662u, 0x783a4a72u,
		0x24270723u, 0x2c2f0f23u, 0xf031c1f1u, 0x70324272u,
		0x40024242u, 0xd414c4d0u, 0x40014141u, 0xc000c0c0u,
		0x70334373u, 0x64274763u, 0xac2c8ca0u, 0x880b8b83u,
		0xf437c7f3u, 0xac2d8da1u, 0x80008080u, 0x1c1f0f13u,
		0xc80acac2u, 0x2c2c0c20u, 0xa82a8aa2u, 0x34340430u,
		0xd012c2d2u, 0x080b0b03u, 0xec2ecee2u, 0xe829c9e1u,
		0x5c1d4d51u, 0x94148490u, 0x18180810u, 0xf838c8f0u,
		0x54174753u, 0xac2e8ea2u, 0x08080800u, 0xc405c5c1u,
		0x10130313u, 0xcc0dcdc1u, 0x84068682u, 0xb83989b1u,
		0xfc3fcff3u, 0x7c3d4d71u, 0xc001c1c1u, 0x30310131u,
		0xf435c5f1u, 0x880a8a82u, 0x682a4a62u, 0xb03181b1u,
		0xd011c1d1u, 0x20200020u, 0xd417c7d3u, 0x00020202u,
		0x20220222u, 0x04040400u, 0x68284860u, 0x70314171u,
		0x04070703u, 0xd81bcbd3u, 0x9c1d8d91u, 0x98198991u,
		0x60214161u, 0xbc3e8eb2u, 0xe426c6e2u, 0x58194951u,
		0xdc1dcdd1u, 0x50114151u, 0x90108090u, 0xdc1cccd0u,
		0x981a8a92u, 0xa02383a3u, 0xa82b8ba3u, 0xd010c0d0u,
		0x80018181u, 0x0c0f0f03u, 0x44074743u, 0x181a0a12u,
		0xe023c3e3u, 0xec2ccce0u, 0x8c0d8d81u, 0xbc3f8fb3u,
		0x94168692u, 0x783b4b73u, 0x5c1c4c50u, 0xa02282a2u,
		0xa02181a1u, 0x60234363u, 0x20230323u, 0x4c0d4d41u,
		0xc808c8c0u, 0x9c1e8e92u, 0x9c1c8c90u, 0x383a0a32u,
		0x0c0c0c00u, 0x2c2e0e22u, 0xb83a8ab2u, 0x6c2e4e62u,
		0x9c1f8f93u, 0x581a4a52u, 0xf032c2f2u, 0x90128292u,
		0xf033c3f3u, 0x48094941u, 0x78384870u, 0xcc0cccc0u,
		0x14150511u, 0xf83bcbf3u, 0x70304070u, 0x74354571u,
		0x7c3f4f73u, 0x34350531u, 0x10100010u, 0x00030303u,
		0x64244460u, 0x6c2d4d61u, 0xc406c6c2u, 0x74344470u,
		0xd415c5d1u, 0xb43484b0u, 0xe82acae2u, 0x08090901u,
		0x74364672u, 0x18190911u, 0xfc3ecef2u, 0x40004040u,
		0x10120212u, 0xe020c0e0u, 0xbc3d8db1u, 0x04050501u,
		0xf83acaf2u, 0x00010101u, 0xf030c0f0u, 0x282a0a22u,
		0x5c1e4e52u, 0xa82989a1u, 0x54164652u, 0x40034343u,
		0x84058581u, 0x14140410u, 0x88098981u, 0x981b8b93u,
		0xb03080b0u, 0xe425c5e1u, 0x48084840u, 0x78394971u,
		0x94178793u, 0xfc3cccf0u, 0x1c1e0e12u, 0x80028282u,
		0x20210121u, 0x8c0c8c80u, 0x181b0b13u, 0x5c1f4f53u,
		0x74374773u, 0x54144450u, 0xb03282b2u, 0x1c1d0d11u,
		0x24250521u, 0x4c0f4f43u, 0x00000000u, 0x44064642u,
		0xec2dcde1u, 0x58184850u, 0x50124252u, 0xe82bcbe3u,
		0x7c3e4e72u, 0xd81acad2u, 0xc809c9c1u, 0xfc3dcdf1u,
		0x30300030u, 0x94158591u, 0x64254561u, 0x3c3c0c30u,
		0xb43686b2u, 0xe424c4e0u, 0xb83b8bb3u, 0x7c3c4c70u,
		0x0c0e0e02u, 0x50104050u, 0x38390931u, 0x24260622u,
		0x30320232u, 0x84048480u, 0x68294961u, 0x90138393u,
		0x34370733u, 0xe427c7e3u, 0x24240420u, 0xa42484a0u,
		0xc80bcbc3u, 0x50134353u, 0x080a0a02u, 0x84078783u,
		0xd819c9d1u, 0x4c0c4c40u, 0x80038383u, 0x8c0f8f83u,
		0xcc0ecec2u, 0x383b0b33u, 0x480a4a42u, 0xb43787b3u,
	).asIntArray(),
	uintArrayOf(
		0xa1a82989u, 0x81840585u, 0xd2d416c6u, 0xd3d013c3u,
		0x50541444u, 0x111c1d0du, 0xa0ac2c8cu, 0x21242505u,
		0x515c1d4du, 0x43400343u, 0x10181808u, 0x121c1e0eu,
		0x51501141u, 0xf0fc3cccu, 0xc2c80acau, 0x63602343u,
		0x20282808u, 0x40440444u, 0x20202000u, 0x919c1d8du,
		0xe0e020c0u, 0xe2e022c2u, 0xc0c808c8u, 0x13141707u,
		0xa1a42585u, 0x838c0f8fu, 0x03000303u, 0x73783b4bu,
		0xb3b83b8bu, 0x13101303u, 0xd2d012c2u, 0xe2ec2eceu,
		0x70703040u, 0x808c0c8cu, 0x333c3f0fu, 0xa0a82888u,
		0x32303202u, 0xd1dc1dcdu, 0xf2f436c6u, 0x70743444u,
		0xe0ec2cccu, 0x91941585u, 0x03080b0bu, 0x53541747u,
		0x505c1c4cu, 0x53581b4bu, 0xb1bc3d8du, 0x01000101u,
		0x20242404u, 0x101c1c0cu, 0x73703343u, 0x90981888u,
		0x10101000u, 0xc0cc0cccu, 0xf2f032c2u, 0xd1d819c9u,
		0x202c2c0cu, 0xe3e427c7u, 0x72703242u, 0x83800383u,
		0x93981b8bu, 0xd1d011c1u, 0x82840686u, 0xc1c809c9u,
		0x60602040u, 0x50501040u, 0xa3a02383u, 0xe3e82bcbu,
		0x010c0d0du, 0xb2b43686u, 0x929c1e8eu, 0x434c0f4fu,
		0xb3b43787u, 0x52581a4au, 0xc2c406c6u, 0x70783848u,
		0xa2a42686u, 0x12101202u, 0xa3ac2f8fu, 0xd1d415c5u,
		0x61602141u, 0xc3c003c3u, 0xb0b43484u, 0x41400141u,
		0x52501242u, 0x717c3d4du, 0x818c0d8du, 0x00080808u,
		0x131c1f0fu, 0x91981989u, 0x00000000u, 0x11181909u,
		0x00040404u, 0x53501343u, 0xf3f437c7u, 0xe1e021c1u,
		0xf1fc3dcdu, 0x72743646u, 0x232c2f0fu, 0x23242707u,
		0xb0b03080u, 0x83880b8bu, 0x020c0e0eu, 0xa3a82b8bu,
		0xa2a02282u, 0x626c2e4eu, 0x93901383u, 0x414c0d4du,
		0x61682949u, 0x707c3c4cu, 0x01080909u, 0x02080a0au,
		0xb3bc3f8fu, 0xe3ec2fcfu, 0xf3f033c3u, 0xc1c405c5u,
		0x83840787u, 0x10141404u, 0xf2fc3eceu, 0x60642444u,
		0xd2dc1eceu, 0x222c2e0eu, 0x43480b4bu, 0x12181a0au,
		0x02040606u, 0x21202101u, 0x63682b4bu, 0x62642646u,
		0x02000202u, 0xf1f435c5u, 0x92901282u, 0x82880a8au,
		0x000c0c0cu, 0xb3b03383u, 0x727c3e4eu, 0xd0d010c0u,
		0x72783a4au, 0x43440747u, 0x92941686u, 0xe1e425c5u,
		0x22242606u, 0x80800080u, 0xa1ac2d8du, 0xd3dc1fcfu,
		0xa1a02181u, 0x30303000u, 0x33343707u, 0xa2ac2e8eu,
		0x32343606u, 0x11141505u, 0x22202202u, 0x30383808u,
		0xf0f434c4u, 0xa3a42787u, 0x41440545u, 0x404c0c4cu,
		0x81800181u, 0xe1e829c9u, 0x80840484u, 0x93941787u,
		0x31343505u, 0xc3c80bcbu, 0xc2cc0eceu, 0x303c3c0cu,
		0x71703141u, 0x11101101u, 0xc3c407c7u, 0x81880989u,
		0x71743545u, 0xf3f83bcbu, 0xd2d81acau, 0xf0f838c8u,
		0x90941484u, 0x51581949u, 0x82800282u, 0xc0c404c4u,
		0xf3fc3fcfu, 0x41480949u, 0x31383909u, 0x63642747u,
		0xc0c000c0u, 0xc3cc0fcfu, 0xd3d417c7u, 0xb0b83888u,
		0x030c0f0fu, 0x828c0e8eu, 0x42400242u, 0x23202303u,
		0x91901181u, 0x606c2c4cu, 0xd3d81bcbu, 0xa0a42484u,
		0x30343404u, 0xf1f031c1u, 0x40480848u, 0xc2c002c2u,
		0x636c2f4fu, 0x313c3d0du, 0x212c2d0du, 0x40400040u,
		0xb2bc3e8eu, 0x323c3e0eu, 0xb0bc3c8cu, 0xc1c001c1u,
		0xa2a82a8au, 0xb2b83a8au, 0x424c0e4eu, 0x51541545u,
		0x33383b0bu, 0xd0dc1cccu, 0x60682848u, 0x737c3f4fu,
		0x909c1c8cu, 0xd0d818c8u, 0x42480a4au, 0x52541646u,
		0x73743747u, 0xa0a02080u, 0xe1ec2dcdu, 0x42440646u,
		0xb1b43585u, 0x23282b0bu, 0x61642545u, 0xf2f83acau,
		0xe3e023c3u, 0xb1b83989u, 0xb1b03181u, 0x939c1f8fu,
		0x525c1e4eu, 0xf1f839c9u, 0xe2e426c6u, 0xb2b03282u,
		0x31303101u, 0xe2e82acau, 0x616c2d4du, 0x535c1f4fu,
		0xe0e424c4u, 0xf0f030c0u, 0xc1cc0dcdu, 0x80880888u,
		0x12141606u, 0x32383a0au, 0x50581848u, 0xd0d414c4u,
		0x62602242u, 0x21282909u, 0x03040707u, 0x33303303u,
		0xe0e828c8u, 0x13181b0bu, 0x01040505u, 0x71783949u,
		0x90901080u, 0x62682a4au, 0x22282a0au, 0x92981a8au,
	).asIntArray(),
	uintArrayOf(
		0x08303838u, 0xc8e0e828u, 0x0d212c2du, 0x86a2a426u,
		0xcfc3cc0fu, 0xced2dc1eu, 0x83b3b033u, 0x88b0b838u,
		0x8fa3ac2fu, 0x40606020u, 0x45515415u, 0xc7c3c407u,
		0x44404404u, 0x4f636c2fu, 0x4b63682bu, 0x4b53581bu,
		0xc3c3c003u, 0x42626022u, 0x03333033u, 0x85b1b435u,
		0x09212829u, 0x80a0a020u, 0xc2e2e022u, 0x87a3a427u,
		0xc3d3d013u, 0x81919011u, 0x01111011u, 0x06020406u,
		0x0c101c1cu, 0x8cb0bc3cu, 0x06323436u, 0x4b43480bu,
		0xcfe3ec2fu, 0x88808808u, 0x4c606c2cu, 0x88a0a828u,
		0x07131417u, 0xc4c0c404u, 0x06121416u, 0xc4f0f434u,
		0xc2c2c002u, 0x45414405u, 0xc1e1e021u, 0xc6d2d416u,
		0x0f333c3fu, 0x0d313c3du, 0x8e828c0eu, 0x88909818u,
		0x08202828u, 0x4e424c0eu, 0xc6f2f436u, 0x0e323c3eu,
		0x85a1a425u, 0xc9f1f839u, 0x0d010c0du, 0xcfd3dc1fu,
		0xc8d0d818u, 0x0b23282bu, 0x46626426u, 0x4a72783au,
		0x07232427u, 0x0f232c2fu, 0xc1f1f031u, 0x42727032u,
		0x42424002u, 0xc4d0d414u, 0x41414001u, 0xc0c0c000u,
		0x43737033u, 0x47636427u, 0x8ca0ac2cu, 0x8b83880bu,
		0xc7f3f437u, 0x8da1ac2du, 0x80808000u, 0x0f131c1fu,
		0xcac2c80au, 0x0c202c2cu, 0x8aa2a82au, 0x04303434u,
		0xc2d2d012u, 0x0b03080bu, 0xcee2ec2eu, 0xc9e1e829u,
		0x4d515c1du, 0x84909414u, 0x08101818u, 0xc8f0f838u,
		0x47535417u, 0x8ea2ac2eu, 0x08000808u, 0xc5c1c405u,
		0x03131013u, 0xcdc1cc0du, 0x86828406u, 0x89b1b839u,
		0xcff3fc3fu, 0x4d717c3du, 0xc1c1c001u, 0x01313031u,
		0xc5f1f435u, 0x8a82880au, 0x4a62682au, 0x81b1b031u,
		0xc1d1d011u, 0x00202020u, 0xc7d3d417u, 0x02020002u,
		0x02222022u, 0x04000404u, 0x48606828u, 0x41717031u,
		0x07030407u, 0xcbd3d81bu, 0x8d919c1du, 0x89919819u,
		0x41616021u, 0x8eb2bc3eu, 0xc6e2e426u, 0x49515819u,
		0xcdd1dc1du, 0x41515011u, 0x80909010u, 0xccd0dc1cu,
		0x8a92981au, 0x83a3a023u, 0x8ba3a82bu, 0xc0d0d010u,
		0x81818001u, 0x0f030c0fu, 0x47434407u, 0x0a12181au,
		0xc3e3e023u, 0xcce0ec2cu, 0x8d818c0du, 0x8fb3bc3fu,
		0x86929416u, 0x4b73783bu, 0x4c505c1cu, 0x82a2a022u,
		0x81a1a021u, 0x43636023u, 0x03232023u, 0x4d414c0du,
		0xc8c0c808u, 0x8e929c1eu, 0x8c909c1cu, 0x0a32383au,
		0x0c000c0cu, 0x0e222c2eu, 0x8ab2b83au, 0x4e626c2eu,
		0x8f939c1fu, 0x4a52581au, 0xc2f2f032u, 0x82929012u,
		0xc3f3f033u, 0x49414809u, 0x48707838u, 0xccc0cc0cu,
		0x05111415u, 0xcbf3f83bu, 0x40707030u, 0x45717435u,
		0x4f737c3fu, 0x05313435u, 0x00101010u, 0x03030003u,
		0x44606424u, 0x4d616c2du, 0xc6c2c406u, 0x44707434u,
		0xc5d1d415u, 0x84b0b434u, 0xcae2e82au, 0x09010809u,
		0x46727436u, 0x09111819u, 0xcef2fc3eu, 0x40404000u,
		0x02121012u, 0xc0e0e020u, 0x8db1bc3du, 0x05010405u,
		0xcaf2f83au, 0x01010001u, 0xc0f0f030u, 0x0a22282au,
		0x4e525c1eu, 0x89a1a829u, 0x46525416u, 0x43434003u,
		0x85818405u, 0x04101414u, 0x89818809u, 0x8b93981bu,
		0x80b0b030u, 0xc5e1e425u, 0x48404808u, 0x49717839u,
		0x87939417u, 0xccf0fc3cu, 0x0e121c1eu, 0x82828002u,
		0x01212021u, 0x8c808c0cu, 0x0b13181bu, 0x4f535c1fu,
		0x47737437u, 0x44505414u, 0x82b2b032u, 0x0d111c1du,
		0x05212425u, 0x4f434c0fu, 0x00000000u, 0x46424406u,
		0xcde1ec2du, 0x48505818u, 0x42525012u, 0xcbe3e82bu,
		0x4e727c3eu, 0xcad2d81au, 0xc9c1c809u, 0xcdf1fc3du,
		0x00303030u, 0x85919415u, 0x45616425u, 0x0c303c3cu,
		0x86b2b436u, 0xc4e0e424u, 0x8bb3b83bu, 0x4c707c3cu,
		0x0e020c0eu, 0x40505010u, 0x09313839u, 0x06222426u,
		0x02323032u, 0x84808404u, 0x49616829u, 0x83939013u,
		0x07333437u, 0xc7e3e427u, 0x04202424u, 0x84a0a424u,
		0xcbc3c80bu, 0x43535013u, 0x0a02080au, 0x87838407u,
		0xc9d1d819u, 0x4c404c0cu, 0x83838003u, 0x8f838c0fu,
		0xcec2cc0eu, 0x0b33383bu, 0x4a42480au, 0x87b3b437u,
	).asIntArray(),
)

private val KC = uintArrayOf(
	0x9e3779b9u, 0x3c6ef373u, 0x78dde6e6u, 0xf1bbcdccu,
	0xe3779b99u, 0xc6ef3733u, 0x8dde6e67u, 0x1bbcdccfu,
	0x3779b99eu, 0x6ef3733cu, 0xdde6e678u, 0xbbcdccf1u,
	0x779b99e3u, 0xef3733c6u, 0xde6e678du, 0xbcdccf1bu,
).asIntArray()

private fun char2word(c: ByteArray, off: Int): Int {
	return (c[off].toInt() shl 24) or (c[off + 1].toInt() shl 16) or (c[off + 2].toInt() shl 8) or c[off + 3].toInt()
}

private fun word2char(input: Int, out: ByteArray, off: Int) {
	out[off] = (input shr 24).toByte()
	out[off + 1] = (input shr 16).toByte()
	out[off + 2] = (input shr 8).toByte()
	out[off + 3] = (input).toByte()
}

private fun g_fun(value: Int): Int {
	return SS[0][value and 0xff] xor
		SS[1][value shr 8 and 0xff] xor
		SS[2][value shr 16 and 0xff] xor
		SS[3][value shr 24 and 0xff]
}

private class Ints(var a: Int, var b: Int, var c: Int, var d: Int)
private class LRInts(var l0: Int, var l1: Int, var r0: Int, var r1: Int)

private fun roundKeyUpdate0(K: IntArray, i: Ints, Z: Int, off: Int) {
	var T0 = i.a + i.c - KC[Z]
	val T1 = i.b + KC[Z] - i.d
	K[off + 0] = g_fun(T0)
	K[off + 1] = g_fun(T1)
	T0 = i.a
	i.a = (i.a shr 8) xor (i.b shl 24)
	i.b = (i.b shr 8) xor (T0 shl 24)
}

private fun roundKeyUpdate1(K: IntArray, i: Ints, Z: Int, off: Int) {
	var T0 = i.a + i.c - KC[Z]
	val T1 = i.b + KC[Z] - i.d
	K[off + 0] = g_fun(T0)
	K[off + 1] = g_fun(T1)
	T0 = i.c
	i.c = (i.c shl 8) xor (i.d shr 24)
	i.d = (i.d shl 8) xor (T0 shr 24)
}

private fun seedRound(i: LRInts, K: IntArray, off: Int) {
	var T0 = i.r0 xor K[off + 0]
	var T1 = i.r1 xor K[off + 1]
	T1 = T1 xor T0
	T1 = g_fun(T1)
	T0 += T1
	T0 = g_fun(T0)
	T1 += T0
	T1 = g_fun(T1)
	T0 += T1
	i.l0 = i.l0 xor T0
	i.l1 = i.l1 xor T1
}

private fun seedRoundKey(userKey: ByteArray, roundKey: IntArray) {
	val i = Ints(
		char2word(userKey, 0),
		char2word(userKey, 4),
		char2word(userKey, 8),
		char2word(userKey, 12)
	)
	
	roundKeyUpdate0(roundKey, i, 0, 0)
	roundKeyUpdate1(roundKey, i, 1, 2)
	roundKeyUpdate0(roundKey, i, 2, 4)
	roundKeyUpdate1(roundKey, i, 3, 6)
	roundKeyUpdate0(roundKey, i, 4, 8)
	roundKeyUpdate1(roundKey, i, 5, 10)
	roundKeyUpdate0(roundKey, i, 6, 12)
	roundKeyUpdate1(roundKey, i, 7, 14)
	roundKeyUpdate0(roundKey, i, 8, 16)
	roundKeyUpdate1(roundKey, i, 9, 18)
	roundKeyUpdate0(roundKey, i, 10, 20)
	roundKeyUpdate1(roundKey, i, 11, 22)
	roundKeyUpdate0(roundKey, i, 12, 24)
	roundKeyUpdate1(roundKey, i, 13, 26)
	roundKeyUpdate0(roundKey, i, 14, 28)
	
	val T0 = i.a + i.c - KC[15]
	val T1 = i.b - i.d + KC[15]
	
	roundKey[30] = g_fun(T0)
	roundKey[31] = g_fun(T1)
}


fun seedEncrypt(input: ByteArray, iv: ByteArray, key: ByteArray): ByteArray {
	val data = input.copyOf(newSize = 16)
	for(i in 0 until 16) {
		data[i] = data[i] xor iv[i]
	}
	
	val roundKey = IntArray(32)
	seedRoundKey(key, roundKey)
	val out = ByteArray(16)
	
	val i = LRInts(
		char2word(data, 0),
		char2word(data, 4),
		char2word(data, 8),
		char2word(data, 12)
	)
	
	seedRound(i, roundKey, 0)
	seedRound(i, roundKey, 2)
	seedRound(i, roundKey, 4)
	seedRound(i, roundKey, 6)
	seedRound(i, roundKey, 8)
	seedRound(i, roundKey, 10)
	seedRound(i, roundKey, 12)
	seedRound(i, roundKey, 14)
	seedRound(i, roundKey, 16)
	seedRound(i, roundKey, 18)
	seedRound(i, roundKey, 20)
	seedRound(i, roundKey, 22)
	seedRound(i, roundKey, 24)
	seedRound(i, roundKey, 26)
	seedRound(i, roundKey, 28)
	seedRound(i, roundKey, 30)
	
	for(index in 0 until 4) {
		word2char(i.r0, out, 0)
		word2char(i.r1, out, 4)
		word2char(i.l0, out, 8)
		word2char(i.l1, out, 12)
	}
	
	return out
}
